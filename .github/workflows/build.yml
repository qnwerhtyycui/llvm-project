# REFS:
# https://github.com/ProcursusTeam/Procursus/tree/main/makefiles
# https://github.com/kabiroberai/darwin-tools-linux/blob/master/prepare-toolchain
# https://sonarsource.atlassian.net/browse/CPP-3285
# DEV:
# https://github.com/llvm/llvm-project/issues/45959
# https://github.com/ClangBuiltLinux/tc-build/issues/150
# https://twitter.com/noztol/status/1277354097788715009
# https://stackoverflow.com/questions/2725255/create-statically-linked-binary-that-uses-getaddrinfo
name: Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main


      - uses: qnwerhtyycui/run-on-arch-action@master
        name: Build toolchain
        with:
          arch: i386
          distro: alpine_latest
          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          install: |
            apk update && apk upgrade
            apk add bash
            apk add sudo
            apk add neofetch

          run: |
            neofetch
            apk add build-base cmake ninja make zlib-dev git python3 python3-dev libgcc libstdc++ gcc autoconf automake openssl-dev openssl-libs-static coreutils libtool pkgconf
            mkdir -p $HOME/linux/iphone/ $HOME/libplist

            echo "Build libplist"
            git clone --depth=1 https://github.com/libimobiledevice/libplist
            cd libplist
            ./autogen.sh --prefix="$HOME/libplist" --without-cython
            make -j$(nproc --all) install

            echo "Build ldid"
            git clone --depth=1 https://github.com/ProcursusTeam/ldid
            cd ldid
            make -j$(nproc --all) DESTDIR="$HOME/linux/iphone/" \
              PREFIX="" \
              LIBCRYPTO_LIBS="-l:libcrypto.a -lpthread -ldl" \
              LIBPLIST_INCLUDES="-I$HOME/libplist/include" \
              LIBPLIST_LIBS="$HOME/libplist/lib/libplist-2.0.a" \
              install

            echo "Build LLVM/Clang"
            mkdir build && cd build
            cmake -G Ninja -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi" \
              -DLLVM_LINK_LLVM_DYLIB=ON \
              -DLLVM_ENABLE_LIBXML2=OFF \
              -DLLVM_ENABLE_ZLIB=OFF \
              -DLLVM_ENABLE_Z3_SOLVER=OFF \
              -DLLVM_ENABLE_BINDINGS=OFF \
              -DLLVM_ENABLE_WARNINGS=OFF \
              -DLLVM_TARGET_ARCH=X86 \
              -DLLVM_BUILD_32_BITS=ON \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DLLVM_INCLUDE_TESTS=OFF \
              -DLLVM_INCLUDE_EXAMPLES=OFF \
              -DLLVM_INCLUDE_UTILS=OFF \
              -DLLVM_INCLUDE_BENCHMARKS=OFF \
              -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
              -DLLVM_INCLUDE_TESTS=OFF \
              -DCLANG_INCLUDE_TESTS=OFF \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DCMAKE_INSTALL_PREFIX="$HOME/linux/iphone/" \
              ../llvm
            ninja -j$(nproc --all) install

            echo "Build tapi"
            git clone --depth=1 https://github.com/tpoechtrager/apple-libtapi
            mkdir -p $HOME/cctools && cd apple-libtapi
            mkdir build-tblgens && cd build-tblgens
            cmake -G Ninja -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
              -DLLVM_INCLUDE_TESTS=OFF \
              -DLLVM_ENABLE_WARNINGS=OFF \
              -DCLANG_INCLUDE_TESTS=OFF \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DLLVM_TARGET_ARCH=X86 \
              -DLLVM_BUILD_32_BITS=ON \
              ../src/llvm
            ninja -j$(nproc --all) llvm-tblgen clang-tblgen
            cd ../
            mkdir build-tapi && cd build-tapi
            cmake -G Ninja -DLLVM_ENABLE_PROJECTS="libtapi" \
              -DLLVM_INCLUDE_TESTS=OFF \
              -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
              -DLLVM_ENABLE_WARNINGS=OFF \
              -DLLVM_TARGET_ARCH=X86 \
              -DLLVM_BUILD_32_BITS=ON \
              -DTAPI_FULL_VERSION="$(cat $PWD/../VERSION.txt | grep "tapi" | grep -o '[[:digit:]].*')" \
              -DLLVM_TABLEGEN="$PWD/../build-tblgens/bin/llvm-tblgen" \
              -DCLANG_TABLEGEN="$PWD/../build-tblgens/bin/clang-tblgen" \
              -DCLANG_TABLEGEN_EXE="$PWD/../build-tblgens/bin/clang-tblgen" \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DCMAKE_CXX_FLAGS="-I$PWD/../src/llvm/projects/clang/include/ -I$PWD/projects/clang/include/" \
              -DCMAKE_INSTALL_PREFIX="$HOME/cctools/" \
              ../src/llvm
            ninja -j$(nproc --all) install-libtapi install-tapi-headers install-tapi

            echo "Build cctools"
            git clone --depth=1 https://github.com/qnwerhtyycui/cctools-port
            cd cctools-port/cctools
            ./configure --prefix="$HOME/cctools/" \
              --target=aarch64-apple-darwin14 \
              --enable-tapi-support \
              --with-libtapi="$HOME/cctools/" \
              --program-prefix="" \
              CC="$HOME/linux/iphone/bin/clang" \
              CXX="$HOME/linux/iphone/bin/clang++" \
              CFLAGS="-m32" \
              CXXFLAGS="-m32" \
              CXXABI_LIB="-l:libc++abi.a" \
              LDFLAGS="-Wl,-rpath,'\$\$ORIGIN/../lib' -Wl,-z,origin"
            make -j$(nproc --all) install
            cp -a $HOME/cctools/* $HOME/linux/iphone/

            echo "Prep build for release"
            cd $HOME
            tar -cJvf iOSToolchain.tar.xz linux/iphone/

            sudo cp -av $HOME/iOSToolchain.tar.xz /artifacts/iOSToolchain.tar.xz
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: iOSToolchain.tar.xz
          path: ~/iOSToolchain.tar.xz
